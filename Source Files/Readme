------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
Character Appearance Option (PCS) Files
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

Pre-Reqs:

Chrome Driver - need a version of chrome driver to be able to run the python file (https://googlechromelabs.github.io/chrome-for-testing/) - make sure to download the "chromedriver"

Author Note: I ran this in Windows Powershell (ie python [python file]) - the system needs the below to run, if they're not installed in your system, they can be installed via typing in the commands below:

	pip install psutil
	pip install selenium
	pip install pyautogui
	pip install pyperclip

------------------------------------------------------------------------------------------------------
Getting PCS Character Data
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: : Get_PCSData.zip

1) Run "1_PCSProcess.py"

Open up Chrome in Remote Debugging Mode to the Jedipedia File Reader tab, load the assets, and go to the node section.

Author Note: I ran this code in Powershell to open up remote debugging mode and will navigate to the right URL:

& "C:\Program Files\Google\Chrome\Application\chrome.exe" --remote-debugging-port=9222 "https://swtor.jedipedia.net/reader"

Wait for the nodes to load, the navigate to the PCS node.  

Inside the PCS node, there is a node for each class.  Within each class, there is a folder for either "male" or "female".  Within each gender node there is a node for a species.  Click on a node for a species.

Make sure to change the view from "Table" to "Parsed" in the top right hand side.

Once in the parsed view, select all (control-a)  

Run the 1_PCSProcess.py script file - this copies data based on the selection in the web browser into file with the following syntax:

[Class]_[gender]_[Cathar]_raw.csv

One could either do this for all class/gender/species combinations, or can run it on a certain one.  If one is trying to do this for all species, the only exception would be the two Zabrak Species, which have their own step later on.  

2) Run "2_CSVProcessAll.py"

This takes the raw CSV file from previous steps, and splits it into multiple files in multiple folders inside of the folder "output", as well as creates a file "CharSliderLabels.csv", as well as a files formatted as 

"[Class]_[gender]_[Cathar].csv"
"[Class]_[gender]_[Cathar]_sliders.csv"

3) Run "3_RenameRawFiles.py"

Optional step - renames all the CSV files in the current folder (except "CharSliderLabels.csv"), adding the prefix "zz_" to help with sorting when copying files.

4) Copy Character Folders within "Output"

Copy all the folders within the "output" folder to the "Chars" directory of the plugin. 

5) Copy "CharSliderLabels.csv"

This file is a CSV which contains the names of the sliders based on species, class, gender, and what the minimum and maximum values are.  

Copy this to the "Chars" folder of the plugin.  

Note: If running this for the first time or running it for all combinations of class/species/gender, then one could just copy the file to the "Chars" folder.  If only some combinations are being updated, one could open up this newly created CSV file, and replace the contents inside the existing "CharSliderLabels.csv" that's within the plugin folder.  

6) Run either "5_ZabrakRename_Imp.py" or "5_ZabrakRename_Rep.py"

Zabraks have two variants of the species in-game, a "Republic" variant and an "Imperial" variant.  The "Imp" version of this file just replaces all instances in the folders and CSV file names of "Zabrak" with "ZabrakImp", and the "Rep" version does the same, replacing "Zabrak" with "ZabrakRep".  The only thing that would need to be manually updated is the species column inside of "CharSliderLabels.csv".


------------------------------------------------------------------------------------------------------
Eye Colors
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: Get_EyeHairSkin_Color.zip

Values to populate the eye color values (ie hue, saturation, etc) are found inside the node files, and need to be extracted in a special way.

Eye Color files are found inside the "Dynamic"->"eyecolor" node - these need to get saved to a JSON file.  To save these to a JSON file:

1) Jedipedia 

Go to the Jedipedia File Reader, go to the node section, and open up the web developer console, and paste in the following code:


copy(stb['str.itm']);

items=[];

readAllNodes('dynamic.eyecolor', (node, obj) => items.push({node, obj}));

function downloadJsonFile(data, filename) {
    // Creating a blob object from non-blob data using the Blob constructor
    const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    // Create a new anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = filename || 'download';
    a.click();
    a.remove();
 }

Press enter, let the console grab all the values, then type in the code below, and hit enter:

downloadJsonFile(items, 'eyecolor_raw')

Save the JSON file to the folder that has "1_PropIDReplace.py".  Note, it's important to have the "_raw" at the end of the filename, the python file looks to replace values that have "_raw" at the end of it.


2) Run '1_PropIDReplace.py'

Run the file, it creates a new JSON file called "eyecolor.json", copy this file to the "char\eyecolor" folder of the plugin directory

------------------------------------------------------------------------------------------------------
Skin Colors
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: Get_EyeHairSkin_Color.zip

Similar process to above:

1) Jedipedia 

Go to the Jedipedia File Reader, go to the node section, and open up the web developer console, and paste in the following code:


copy(stb['str.itm']);

items=[];

readAllNodes('dynamic.skincolor', (node, obj) => items.push({node, obj}));

function downloadJsonFile(data, filename) {
    // Creating a blob object from non-blob data using the Blob constructor
    const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    // Create a new anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = filename || 'download';
    a.click();
    a.remove();
 }

Press enter, let the console grab all the values, then type in the code below, and hit enter:

downloadJsonFile(items, 'skincolor_raw')

Save the JSON file to the folder that has "1_PropIDReplace.py".  Note, it's important to have the "_raw" at the end of the filename, the python file looks to replace values that have "_raw" at the end of it.


2) Run '1_PropIDReplace.py'

Run the file, it creates a new JSON file called "skincolor.json", copy this file to the "char\skincolor" folder of the plugin directory

------------------------------------------------------------------------------------------------------
Hair Colors
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: Get_EyeHairSkin_Color.zip

Similar process to above:

1) Jedipedia 

Go to the Jedipedia File Reader, go to the node section, and open up the web developer console, and paste in the following code:


copy(stb['str.itm']);

items=[];

readAllNodes('dynamic.haircolor', (node, obj) => items.push({node, obj}));

function downloadJsonFile(data, filename) {
    // Creating a blob object from non-blob data using the Blob constructor
    const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    // Create a new anchor element
    const a = document.createElement('a');
    a.href = url;
    a.download = filename || 'download';
    a.click();
    a.remove();
 }

Press enter, let the console grab all the values, then type in the code below, and hit enter:

downloadJsonFile(items, 'haircolor_raw')

Save the JSON file to the folder that has "1_PropIDReplace.py".  Note, it's important to have the "_raw" at the end of the filename, the python file looks to replace values that have "_raw" at the end of it.


2) Run '1_PropIDReplace.py'

Run the file, it creates a new JSON file called "haircolor.json", copy this file to the "char\haircolor" folder of the plugin directory

STEP #1

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
Getting Armor Data
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------
Step 1 - Getting IPP Data
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: Get_ArmorData_1_IPPData.zip

Pre-Reqs:

Chrome Driver - need a version of chrome driver to be able to run the python file (https://googlechromelabs.github.io/chrome-for-testing/) - make sure to download the "chromedriver"

CSV File of Nodes - needs a CSV file to tell the script what nodes to process - trying to process the entire "ipp" node at a time can often lead to crashing, so breaking this up (ie into each node within the ipp node) does not lead to the same issues and is recommended.

Property ID Translation File - needs a .json file to process the "untranslated" property ID fields - will replace any string it finds on the left hand side of the file with the translated name on the right hand side file.  To get updated translations:

	1) Go to Jedipedia File Reader, go to the node tab.
	2) Open up the developer console (ie F12 on chrome), and run the following command:

	copy(Object.entries(GOM.fields).map(t => t.join('\t')).join('\n'))

	3) This creates a JSON file that is copied to the clipboard - paste this into a new file, and save it as a .json file


Author Note: I ran this in Windows Powershell (ie python [python file]) - the system needs the below to run, if they're not installed in your system, they can be installed via typing in the commands below:

	pip install psutil
	pip install selenium
	pip install pyautogui
	pip install pyperclip

1) 1_ProcessingArmorValues.py

Input: Chrome Directory ('chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"')
Input: .TOR file directory ('tor_files = [os.path.join('A:\\Games\\SWTOR\\Assets', f) for f in os.listdir('A:\\Games\\SWTOR\\Assets') if f.endswith('.tor')]')
Input:  Chrome Driver Directory ('driver = webdriver.Chrome(service=Service('C:\\Users\\Jeff\\Desktop\\testDirect\\chromedriver-win64\\chromedriver.exe'), options=options)')
Input: CSV file of nodes ('CSV_FILE = os.path.join(INPUT_DIRECTORY, 'NodeMapping.csv')  # CSV file path')
Input: Property ID Translation File ('MAPPING_FILE = r"GOM.fields.json"  # Path to your mapping file')

Downloads all untranslated node data for all files in the "ipp" node section to "raw" folder

NOTE: This function mimics saving files by hand in one part of it, if one clicks around or navigates to other web pages while this is running, the function will not work (it will fail to save the JSON files)

2) 2_json-field-replacer.py

Input: Name Translation File ('fields_mapping = load_json_file('GOM.fields.json')')

Replaces the property IDs from the downloaded JSON files with translated names, created an output in the "processed" folder

3) 3_ConvertToCSV.py

Creates "ippArmorValues.csv" file - contains a CSV with the following columns:

Column #1: Armor FQN Name
Column #2: Display Name
Column #3: Slot (ie leg, hand, etc)
Column #4: Model ID
Column #5: Color Scheme ID
Column #6: Material IID

4) Place the newly created CSV file ("ippArmorValues.csv") into the "ArmorIPP" folder of the plugin.


OPTIONAL: All inputs need to be updated for your file path, but once done, can run the single script "RunAll_GettingIPP.py" to run all three files in order.  

------------------------------------------------------------------------------------------------------
Step 2 - Getting ITM Data
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: Get_ArmorData_2_IPPData.zip

Pre-Reqs:

Chrome Driver - need a version of chrome driver to be able to run the python file (https://googlechromelabs.github.io/chrome-for-testing/) - make sure to download the "chromedriver"

CSV File of Nodes - needs a CSV file to tell the script what nodes to process - trying to process the entire "ipp" node at a time can often lead to crashing, so breaking this up (ie into each node within the ipp node) does not lead to the same issues and is recommended.

Property ID Translation File - needs a .json file to process the "untranslated" property ID fields - will replace any string it finds on the left hand side of the file with the translated name on the right hand side file.  To get updated translations:

	1) Go to Jedipedia File Reader, go to the node tab.
	2) Open up the developer console (ie F12 on chrome), and run the following command:

	copy(Object.entries(GOM.fields).map(t => t.join('\t')).join('\n'))

	3) This creates a JSON file that is copied to the clipboard - paste this into a new file, and save it as a .json file

ITM ID Translation File - needs a .json file to process the "untranslated" ITM ID field - will replace any string it finds on the left hand side of the file with the translated name (ie in-game name) on the right hand side of the file.  To get updated translations:

	1) Go to Jedipedia File Reader, go to the node tab.
	2) Open up the developer console (ie F12 on chrome), and run the following command:

	copy(stb['str.itm']);

	3) This creates a JSON file that is copied to the clipboard - paste this into a new file, and save it as a .json file 

Author Note: I ran this in Windows Powershell (ie python [python file]) - the system needs the below to run, if they're not installed in your system, they can be installed via typing in the commands below:

	pip install psutil
	pip install selenium
	pip install pyautogui
	pip install pyperclip


1) 1_ProcessingArmorValues.py

Input: Chrome Directory ('chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"')
Input: .TOR file directory ('tor_files = [os.path.join('A:\\Games\\SWTOR\\Assets', f) for f in os.listdir('A:\\Games\\SWTOR\\Assets') if f.endswith('.tor')]')
Input:  Chrome Driver Directory ('driver = webdriver.Chrome(service=Service('C:\\Users\\Jeff\\Desktop\\testDirect\\chromedriver-win64\\chromedriver.exe'), options=options)')
Input: CSV file of nodes ('CSV_FILE = os.path.join(INPUT_DIRECTORY, 'NodeMapping.csv')  # CSV file path')
Input: Property ID Translation File ('MAPPING_FILE = r"GOM.fields.json"  # Path to your mapping file')

Downloads all untranslated node data for all files in the "itm" node section to "raw" folder

NOTE: This function mimics saving files by hand in one part of it, if one clicks around or navigates to other web pages while this is running, the function will not work (it will fail to save the JSON files)

2) 2_json-field-replacer.py

Input: Name Translation File ('fields_mapping = load_json_file('GOM.fields.json')')

Replaces the property IDs from the downloaded JSON files with translated names, created an output in the "processed" folder

3) 3_ReplaceNames.py

Input: ITM Translation File ('item_names_file = os.path.join(current_dir, "ITMNameValues.json")')

Replaces the ITM IDs from the downloaded JSON files in the "processed" folder with the translate ITM names, and saves new file to the "Named" folder.


4) 4_CreatingNameCSV.py

Creates a file "ArmorNodes_Names.csv" - a CSV file with three columns:

Column #1: Armor FQN Name
Column #2: Slot (leg, chest, etc)
Column #3: In-Game Name

NOTE: All four of the .py file need any of their inputs updated, but instead of running each file individually, one can run the file "" to run all four of them in sequence.  

------------------------------------------------------------------------------------------------------
Step 3 - Combining ITM and IPP Data
------------------------------------------------------------------------------------------------------

Use Tools in Zip File: Get_ArmorData_3_IPPData.zip

Pre-Reqs

Ensure that the "ippArmorValues.csv" file from the IPP process and the "ArmorNodes_Names.csv" file from the ITM process are inside the folder that "1_CreateNameFile.py" is in.

1) 1_CreateNameFile.py

Creates a new "ippArmorValues.csv" file called "ippArmorValues_en" - replaces Column #2 with the in-game names from the "ArmorNodes_Names.csv" files.  Note: If no matching in game name is found, it uses the FQN name inside of square brackets.

One would be able to do this for other non-English languages to get the names to show up in Blender if they load the non-English version into the Jedipedia file reader, and run the ITM process.  More on how to place this in the plugin and what code would need to be modified in the step after next.

2) 2_Sorting.py

Sorts the CSV files based on column - the script will ask to type in the CSV file to sort (ie "ippArmorValues_en.csv"), and ask which column to sort by.  To sort by in-game names, use type in "1" (Column 0 is first column, Column 1 is 2nd column).  

3) Place inside of Plugin Folder

Take the "ippArmorValues_en_sorted.csv" file, place it inside the "ArmorIPP" folder of the plugin, and remove the "_sorted" part from the file name.

4) OPTIONAL - Additional Languages

If a non-English "ArmorNodes_Names.csv" is used, one would need to run Step 1 above, then change the file name from "ippArmorValues_en.csv" to say for Spanish "ippArmorValues_sp.csv" - the exact name for the non-English file does not matter, this will be changed in the code of the plugin.  Run the sorting function, then place the file inside of the "ArmorIPP" folder of the plugin, and removed the "_sorted" at the end of the file name.

To add this to the code of the plugin, 

	1) Go to the register function at the very end of the code (ie 'def register():'), and then go to the armor_language property (ie 'bpy.types.Scene.armor_language')

	2) The plugin currently has "FQN" and "English", to add a language, add a new line to the items dictionary (ie the 'items=[' part).  There are three columns - the first column is the reference name in the code, the second column is what will display in Blender, and the third column is the description column (ie the text that appears when you hover the mouse over the choice)

	For example, adding a French language, the code for the items dictionary would be

            ('FQN', "FQN", "Display Armor Names as FQN"),
            ('ENGLISH', "English", "Display Armor Names - English")  
	    ('FRENCH', "French", "Afficher les noms d'armures - Français") 	 


	3) go to the "get_armor_csv_path" function (ie 'def get_armor_csv_path(context):'), the function contains an example, a  commented out section for adding in a French langauge, one would do this for whichever languge(s) they would like to add.  

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
Dye Color Values
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

To update dye color values:

1) Open up Jedipedia, go to the node section, and search for the "itmAppearanceColors" node, and open the node

2) Select all and copy (ie control-a, control-c) into a new file (control-v) and save this as "DyeColors.csv"

3) Go through and deleted all the non-armor dye values, it's quite obvious to tell which ones are for armor and which ones are not.  Dye color values should start around #28 with the "Black/Black" dye color

4) Open up the CSV file in excel (any spreadsheet editor of your choice will probably work), and sort the columns by the third column (ie the in-game name), and saved as a new "DyeColors.csv" file.

5) Copy the "DyeColors.csv" to the "Dyes" folder of the plugin.

